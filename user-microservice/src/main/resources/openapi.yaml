openapi: 3.0.3
info:
  title: BookMania User Microservice - OpenAPI 3.0
  description: |-
   We want to develop a social media platform dedicated to book enthusiasts and readers of all kinds, called BookMania. It serves as a virtual library where users can catalog and review the books they've read, as well as discover new titles based on their interests and reading history. The platform allows members to create personalized bookshelves, join discussion groups, and participate in reading challenges. It also provides a space for users to connect with friends, see their recommendations, and follow authors.
  
  version: 0.0.1
servers:
  - url: https://localhost:8080
    description: Local development server
tags:
  - name: book
    description: Books in the bookstore
  - name: user
    description: Operations that the user can do
  - name: admin
    description: Operations that the admin can do
  
paths:
  /book/{username}:
    post:
      tags:
        - book
      summary: Add a new book to the store
      description: Add a new book to the store
      operationId: addBook
      parameters:
        - in: path
          required: true
          name: username
          description: The user's username
          schema:
            type:
              string
      requestBody:
        description: Create a new book in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'          
        '405':
          description: Validation exception
        '403':
          description: Unauthorised user
          
  /book/search:
    get:
      tags: 
        - book
      summary: Search books by author, genre, title, description, series and sort by read_count, alphabetical 
      description: Retrieve books based on specified criteria
      parameters:
        - name: author
          in: query
          description: The author of the books to search for
          required: false
          schema:
            type: string
        - name: genre
          in: query
          description: The genre of the books to search for
          required: false
          schema:
            type: string
        - name: title
          in: query
          description: The title of the books to search for
          required: false
          schema:
            type: string
        - name: description
          in: query
          description: The description of the books to search for
          required: false
          schema:
            type: string
        - name: series
          in: query
          description: The series of the books to search for
          required: false
          schema:
            type: string
        - name: sortBy
          in: query
          description: Sort the books by a specific field (e.g., read_count, alphabetical)
          required: false
          schema:
            type: string
            enum: [read_count, alphabetical, read_count_reversed, alphabetical_reversed]
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          description: Invalid search parameters
  /book/{id}:
    get:
      tags:
        - book
      summary: Get a book
      description: Get a book by id
      operationId: getBook
      parameters:
        - name: id
          in: path
          description: 'The id of the book that needs getting'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid ID supplied
        '404':
          description: Book not found
  /book/{id}/{username}:
    put:
      tags:
        - book
      summary: Update an existing book
      description: Update an existing book by Id
      operationId: updateBook
      parameters:
        - name: id
          in: path
          description: 'The id of the book that needs changing'
          required: true
          schema:
            type: string
        - in: path
          required: true
          name: username
          description: The user's username
          schema:
            type:
              string
      requestBody:
        description: Update an existent book in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid ID supplied
        '403':
          description: Unauthorised user
        '404':
          description: Book not found
    delete:
      tags:
        - book
      summary: Remove a book from the store
      description: Remove a book from the store by id
      operationId: removeBook
      parameters:
        - name: id
          in: path
          description: 'The id of the book that needs deletion'
          required: true
          schema:
            type: string
        - in: path
          required: true
          name: username
          description: The user's username
          schema:
            type:
              string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid ID supplied
        '403':
          description: Unauthorised user
        '404':
          description: Book not found
  /book/read/{id}:
    put:
      tags:
        - book
      summary: Read a book
      description: 'Adds 1 to the read count for the given book'
      operationId: readBook
      parameters:
        - name: id
          in: path
          description: 'The id of the book that the user has read'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
  /book:
    get:
      tags: 
        - book
      summary: Get Books by IDs
      description: Retrieve books based on provided IDs
      parameters:
        - name: bookIds
          in: query
          description: Array of book IDs
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          description: Invalid search parameters

  /user/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: 'MyUsername'
                password:
                  type: string
                  example: 'SafePassword1234'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                example: '130390fasflsd98740815019287aslkfjaskf'
                description: Session ID
        '401':
          description: Invalid username/password supplied
  /user/logout/:
    post:
      security:
        - jwt: []
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      responses:
        '200':
          description: successful operation
        '401':
          description: Not logged in
  /user/:
    post:
      tags:
        - user
      summary: Create user
      description: This is the sign-up route
      operationId: createUser
      requestBody:
        description: User object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successfuly created user
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessionToken:
                    type: string
                  user: 
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid user object
        '409':
          description: Username/Email already in use
    put:
      tags:
        - user
      summary: Update user
      security:
        - jwt: []
      description: This can only be done by the logged in user.
      operationId: updateUser
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
        '401':
          description: not logged in
    delete:
      tags:
        - user
      summary: Delete user
      description: This is only done by the user themselves
      operationId: deleteSelf
      security:
        - jwt: []
      responses:
        '200':
          description: successful operation
        '401':
          description: Not logged in
  /user/setActive/{username}:
    put:
      tags:
        - admin
      security:
        - jwt: []
      summary: Change user activation
      parameters:
        - name: username
          in: path
          description: 'The name of the user to edit.'
          required: true
          schema:
            type: string
      description: This can only be done by a admin
      operationId: changeActivation
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
              description: 'Whether the user should be active'
              example: true
      responses:
        '200':
          description: successful operation
        '401':
          description: Not logged in
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    delete:
      tags:
        - admin
      security:
        - jwt: []
      summary: Delete user
      description: This can only be done by a logged in admin.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username supplied
        '401':
          description: Not logged in
        '403':
          description: Only an admin can remove a user
        '404':
          description: User not found
  /user/search:
    get:
      tags:
        - user
      summary: Search a user
      parameters:
        - in: query
          required: true
          name: query
          schema:
            type: string
          description: The search query.
          example: 'John Green'
        - in: query
          name: searchBy
          schema:
            type: string
            enum: [name, genre, favorite_book, follows]
          description: 'The type of search. Options: name | genre | favorite_book | follows. Default: name'
          example: 'name'
        - in: query
          name: isAuthor
          schema:
            type: boolean
          description: 'Whether to search authors or users Default: true'
          example: true
      description: Get a list of authors based on a search query
      operationId: searchUser
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Invalid search parameters

  /user/deactivate:
    put:
      tags:
        - user
      security:
        - jwt: []
      summary: Deactivate user
      description: This can only be done by a user to themselves
      operationId: deactivateSelf
      responses:
        '200':
          description: successful operation
        '400':
          description: User already inactive
        '401':
          description: Not logged in
  /user/reactivate:
    put:
      tags:
        - user
      security:
        - jwt: []
      summary: Reactivate user
      description: This can only be done by a user to themselves
      operationId: reactivateSelf
      responses:
        '200':
          description: successful operation
        '400':
          description: User already active
        '401':
          description: Not logged in  
  /user/follow/{username}:
    post:
      tags:
        - user
      summary: Follows a user
      
      description: ''
      operationId: followUser
      security:
        - jwt: []
      parameters:
        - name: username
          in: path
          description: The user that will be followed
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '401':
          description: Not logged in
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Unfollows a user
      description: ''
      operationId: unfollowUser
      security:
        - jwt: []
      parameters:
        - name: username
          in: path
          description: The user that will be unfollowed
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '401':
          description: Not logged in
        '404':
          description: User not found
  /user/followers/{username}:
    get:
      tags:
        - user
      summary: Get followers of a user
      description: Retrieves an array of usernames that follow the specified user.
      parameters:
        - name: username
          in: path
          description: The username of the user whose followers are to be retrieved
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: User not found
  /user/following/{username}:
    get:
      tags:
        - user
      summary: Get users that an user follows
      description: Retrieves an array of usernames that the user follows.
      parameters:
        - name: username
          in: path
          description: The username of the user whose following users are to be retrieved
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: User not found
    
  /analytics/{username}:
    post:
      tags:
        - analytics
      summary: Create analytics entity
      description: Create new analytics entity
      parameters:
      - name: username
        in: path
        description: The username of the user that the analytics are for
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '404':
          description: User not found
    
    put:
      tags:
        - analytics
      summary: Update analytics
      description: Update analytics
      parameters:
      - name: username
        in: path
        description: The username of the user that the analytics are for
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '404':
          description: User not found
    
    get:
      tags:
        - analytics
      summary: Get analytics
      description: Get analytics for a user
      parameters:
      - name: username
        in: path
        description: The username of the user that the analytics are for
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Analytics'
        '404':
          description: User not found
          
    delete:
      tags:
        - analytics
      summary: Update analytics
      description: Update analytics
      parameters:
      - name: username
        in: path
        description: The username of the user that the analytics are for
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful response
        '404':
          description: User not found    
    
      

components:
  securitySchemes:
    jwt:        # arbitrary name for the security scheme
      type: http
      scheme: bearer       # can be "header", "query" or "cookie"
      bearerFormat: JWT
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        title:
          type: string
          example: 'The Best Book'
        description:
          type: string
          example: 'The greatest book ever'
        author:
          type: string
          example: 'Bob Bobson'
        reads:
          type: integer
          format: int64
          example: 0
        series:
          type: string
          example: 'The Big Trilogy'
        genres:
          type: array
          items:
            type: string
          example: 
            - 'Horror'
            - 'Sci-fi'
            - 'Thriller'
    User:
      type: object
      properties:
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        userRole:
          type: string
          enum:
            - 'Regular'
            - 'Admin'
            - 'Author'
          description: User role (Regular or Author or Admin)
          example: 'Regular'
        isActive:
          type: boolean
          description: Whether the user account is activated (not deactivated)
          example: true
        isBanned:
          type: boolean
          description: Whether the user account is banned
          example: true
        bio:
          type: string
          description: User Bio
          example: 'Hey I am a person'
        location:
          type: string
          description: Simple string that vaguely describes where the user is
          example: 'The Netherlands'
        profilePicture:
          type: string
          description: URL of an image
          example: 'https://server.net/image.jpg'
        favoriteBook:
          type: string
          description: Name of favorite book
          example: 'Harry Potter'
        favoriteGenres:
          type: array
          items:
            type: string
            description: Name of the genre
            example: 'Horror'
        followers:
          type: array
          items:
            $ref: '#/components/schemas/User'
        following:
          type: array
          items:
            $ref: '#/components/schemas/User'
            
    Analytics:
      type: object
      properties:
        userUsername:
          type: string
          example: theUser
        reviewsNumber:
          type: integer
          format: int64
          example: '7'
        commentsNumber:
          type: integer
          format: int64
          example: '2'
        lastLoginDate:
          type: string
          example: '12.02.2020'
        followersNumber:
          type: integer
          format: int64
          example: '21'
        followingNumber:
          type: integer
          format: int64
          example: '13'
        


  requestBodies:
    User:
      description: User object that needs to be signed up
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    
    Book:
      description: Book object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Book'
            
    Analytics:
      description: Analytics object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Analytics'

